{"ast":null,"code":"// services/APIService.js\nclass APIService {\n  constructor() {\n    this.baseUrl = 'http://localhost:8081'; // Replace with your actual backend URL\n  }\n\n  async getBlocks() {\n    try {\n      const response = await fetch(`${this.baseUrl}/block`);\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error fetching blocks:', error);\n      throw error;\n    }\n  }\n  async createBlock(blockData) {\n    try {\n      const response = await fetch(`${this.baseUrl}/block/create`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(blockData)\n      });\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error creating block:', error);\n      throw error;\n    }\n  }\n  async updateBlock(oldBlock, newBlock) {\n    try {\n      const response = await fetch(`${this.baseUrl}/block/update/${oldBlock}?newBlock=${newBlock}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error updating block:', error);\n      throw error;\n    }\n  }\n  async deleteBlock(block) {\n    try {\n      const response = await fetch(`${this.baseUrl}/block?block=${block}`, {\n        method: 'DELETE'\n      });\n      if (response.status === 200) {\n        console.log('Block deleted successfully');\n      } else {\n        throw new Error('Block deletion failed');\n      }\n    } catch (error) {\n      console.error('Error deleting block:', error);\n      throw error;\n    }\n  }\n}\nexport default APIService;","map":{"version":3,"names":["APIService","constructor","baseUrl","getBlocks","response","fetch","data","json","error","console","createBlock","blockData","method","headers","body","JSON","stringify","updateBlock","oldBlock","newBlock","deleteBlock","block","status","log","Error"],"sources":["/Users/trojan/Documents/Jekts/Full_Stack_Block/block-front-end/src/services/APIService.js"],"sourcesContent":["// services/APIService.js\nclass APIService {\n  constructor() {\n    this.baseUrl = 'http://localhost:8081'; // Replace with your actual backend URL\n  }\n\n  async getBlocks() {\n    try {\n      const response = await fetch(`${this.baseUrl}/block`);\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error fetching blocks:', error);\n      throw error;\n    }\n  }\n\n  async createBlock(blockData) {\n    try {\n      const response = await fetch(`${this.baseUrl}/block/create`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(blockData)\n      });\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error creating block:', error);\n      throw error;\n    }\n  }\n\n  async updateBlock(oldBlock, newBlock) {\n    try {\n      const response = await fetch(`${this.baseUrl}/block/update/${oldBlock}?newBlock=${newBlock}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n      });\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error updating block:', error);\n      throw error;\n    }\n  }\n\n  async deleteBlock(block) {\n    try {\n      const response = await fetch(`${this.baseUrl}/block?block=${block}`, {\n        method: 'DELETE'\n      });\n      if (response.status === 200) {\n        console.log('Block deleted successfully');\n      } else {\n        throw new Error('Block deletion failed');\n      }\n    } catch (error) {\n      console.error('Error deleting block:', error);\n      throw error;\n    }\n  }\n}\n\nexport default APIService;\n"],"mappings":"AAAA;AACA,MAAMA,UAAU,CAAC;EACfC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,OAAO,GAAG,uBAAuB,CAAC,CAAC;EAC1C;;EAEA,MAAMC,SAASA,CAAA,EAAG;IAChB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAE,IAAI,CAACH,OAAQ,QAAO,CAAC;MACrD,MAAMI,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAClC,OAAOD,IAAI;IACb,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,MAAMA,KAAK;IACb;EACF;EAEA,MAAME,WAAWA,CAACC,SAAS,EAAE;IAC3B,IAAI;MACF,MAAMP,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAE,IAAI,CAACH,OAAQ,eAAc,EAAE;QAC3DU,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,SAAS;MAChC,CAAC,CAAC;MACF,MAAML,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAClC,OAAOD,IAAI;IACb,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,MAAMA,KAAK;IACb;EACF;EAEA,MAAMS,WAAWA,CAACC,QAAQ,EAAEC,QAAQ,EAAE;IACpC,IAAI;MACF,MAAMf,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAE,IAAI,CAACH,OAAQ,iBAAgBgB,QAAS,aAAYC,QAAS,EAAC,EAAE;QAC5FP,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MACF,MAAMP,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAClC,OAAOD,IAAI;IACb,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,MAAMA,KAAK;IACb;EACF;EAEA,MAAMY,WAAWA,CAACC,KAAK,EAAE;IACvB,IAAI;MACF,MAAMjB,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAE,IAAI,CAACH,OAAQ,gBAAemB,KAAM,EAAC,EAAE;QACnET,MAAM,EAAE;MACV,CAAC,CAAC;MACF,IAAIR,QAAQ,CAACkB,MAAM,KAAK,GAAG,EAAE;QAC3Bb,OAAO,CAACc,GAAG,CAAC,4BAA4B,CAAC;MAC3C,CAAC,MAAM;QACL,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;MAC1C;IACF,CAAC,CAAC,OAAOhB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,MAAMA,KAAK;IACb;EACF;AACF;AAEA,eAAeR,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}