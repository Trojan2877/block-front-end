{"ast":null,"code":"import ApiService from './ApiService';\nconst API_BASE_URL = 'http://localhost:8081';\nconst BlockService = {\n  getBlocks: async () => {\n    return ApiService.get(`${API_BASE_URL}/block`);\n  },\n  createBlock: async blockData => {\n    try {\n      const response = await ApiService.post(`${API_BASE_URL}/block/create`, blockData);\n      const responseData = await response.json();\n      if (response.ok) {\n        return responseData;\n      } else {\n        throw new Error(responseData.error); // Assuming the error message is in responseData.error\n      }\n    } catch (error) {\n      throw new Error('Error creating block'); // Throw a generic error message if something unexpected happens\n    }\n  },\n\n  updateBlock: async (oldBlock, newBlock) => {\n    const response = await ApiService.put(`${API_BASE_URL}/block/update/${oldBlock}?newBlock=${newBlock}`);\n    const responseData = await response.json();\n    return responseData;\n  },\n  deleteBlock: async blockId => {\n    return ApiService.delete(`${API_BASE_URL}/block?block=${blockId}`);\n  }\n};\nexport default BlockService;","map":{"version":3,"names":["ApiService","API_BASE_URL","BlockService","getBlocks","get","createBlock","blockData","response","post","responseData","json","ok","Error","error","updateBlock","oldBlock","newBlock","put","deleteBlock","blockId","delete"],"sources":["/Users/trojan/Documents/Jekts/block-react/src/services/BlockService.js"],"sourcesContent":["import ApiService from './ApiService';\n\nconst API_BASE_URL = 'http://localhost:8081';\n\nconst BlockService = {\n  getBlocks: async () => {\n    return ApiService.get(`${API_BASE_URL}/block`);\n  },\n\n  createBlock: async blockData => {\n    try {\n      const response = await ApiService.post(`${API_BASE_URL}/block/create`, blockData);\n      const responseData = await response.json();\n      if (response.ok) {\n        return responseData;\n      } else {\n        throw new Error(responseData.error); // Assuming the error message is in responseData.error\n      }\n    } catch (error) {\n      throw new Error('Error creating block'); // Throw a generic error message if something unexpected happens\n    }\n  },\n\n  updateBlock: async (oldBlock, newBlock) => {\n    const response = await ApiService.put(`${API_BASE_URL}/block/update/${oldBlock}?newBlock=${newBlock}`);\n    const responseData = await response.json();\n    return responseData;\n  },\n\n  deleteBlock: async blockId => {\n    return ApiService.delete(`${API_BASE_URL}/block?block=${blockId}`);\n  },\n};\n\nexport default BlockService;\n"],"mappings":"AAAA,OAAOA,UAAU,MAAM,cAAc;AAErC,MAAMC,YAAY,GAAG,uBAAuB;AAE5C,MAAMC,YAAY,GAAG;EACnBC,SAAS,EAAE,MAAAA,CAAA,KAAY;IACrB,OAAOH,UAAU,CAACI,GAAG,CAAE,GAAEH,YAAa,QAAO,CAAC;EAChD,CAAC;EAEDI,WAAW,EAAE,MAAMC,SAAS,IAAI;IAC9B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMP,UAAU,CAACQ,IAAI,CAAE,GAAEP,YAAa,eAAc,EAAEK,SAAS,CAAC;MACjF,MAAMG,YAAY,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAC1C,IAAIH,QAAQ,CAACI,EAAE,EAAE;QACf,OAAOF,YAAY;MACrB,CAAC,MAAM;QACL,MAAM,IAAIG,KAAK,CAACH,YAAY,CAACI,KAAK,CAAC,CAAC,CAAC;MACvC;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACd,MAAM,IAAID,KAAK,CAAC,sBAAsB,CAAC,CAAC,CAAC;IAC3C;EACF,CAAC;;EAEDE,WAAW,EAAE,MAAAA,CAAOC,QAAQ,EAAEC,QAAQ,KAAK;IACzC,MAAMT,QAAQ,GAAG,MAAMP,UAAU,CAACiB,GAAG,CAAE,GAAEhB,YAAa,iBAAgBc,QAAS,aAAYC,QAAS,EAAC,CAAC;IACtG,MAAMP,YAAY,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAC1C,OAAOD,YAAY;EACrB,CAAC;EAEDS,WAAW,EAAE,MAAMC,OAAO,IAAI;IAC5B,OAAOnB,UAAU,CAACoB,MAAM,CAAE,GAAEnB,YAAa,gBAAekB,OAAQ,EAAC,CAAC;EACpE;AACF,CAAC;AAED,eAAejB,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}