{"ast":null,"code":"var _jsxFileName = \"/Users/trojan/Documents/Jekts/Full_Stack_Block/block-front-end/src/views/UpdateBlockView.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport BlockController from '../controllers/BlockController';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction UpdateBlockView() {\n  _s();\n  const [oldBlock, setOldBlock] = useState('');\n  const [newBlock, setNewBlock] = useState('');\n  const [message, setMessage] = useState('');\n  const [isSuccess, setIsSuccess] = useState(true);\n  const blockController = new BlockController();\n  async function handleUpdateBlock(event) {\n    event.preventDefault();\n    try {\n      const updatedBlock = await blockController.updateBlock(oldBlock, newBlock);\n      console.log('Block updated:', updatedBlock);\n      setMessage('Block updated successfully');\n      setIsSuccess(true);\n      setOldBlock('');\n      setNewBlock('');\n      // Handle success message or navigation\n    } catch (error) {\n      console.error('Error updating block:', error);\n      setMessage('Block update failed');\n      setIsSuccess(false);\n      setOldBlock('');\n      setNewBlock('');\n      // Handle error message\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Update Block\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleUpdateBlock,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Old Block:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: oldBlock,\n        onChange: e => setOldBlock(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"New Block:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newBlock,\n        onChange: e => setNewBlock(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Update Block\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: isSuccess ? 'green' : 'red'\n      },\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n}\n_s(UpdateBlockView, \"ju4V5k/ecwmKdqXlQhiNYl64BwI=\");\n_c = UpdateBlockView;\nexport default UpdateBlockView;\nvar _c;\n$RefreshReg$(_c, \"UpdateBlockView\");","map":{"version":3,"names":["React","useState","BlockController","jsxDEV","_jsxDEV","UpdateBlockView","_s","oldBlock","setOldBlock","newBlock","setNewBlock","message","setMessage","isSuccess","setIsSuccess","blockController","handleUpdateBlock","event","preventDefault","updatedBlock","updateBlock","console","log","error","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","e","target","style","color","_c","$RefreshReg$"],"sources":["/Users/trojan/Documents/Jekts/Full_Stack_Block/block-front-end/src/views/UpdateBlockView.js"],"sourcesContent":["import React, { useState } from 'react';\nimport BlockController from '../controllers/BlockController';\n\nfunction UpdateBlockView() {\n  const [oldBlock, setOldBlock] = useState('');\n  const [newBlock, setNewBlock] = useState('');\n  const [message, setMessage] = useState('');\n  const [isSuccess, setIsSuccess] = useState(true);\n  const blockController = new BlockController();\n\n  async function handleUpdateBlock(event) {\n    event.preventDefault();\n    try {\n      const updatedBlock = await blockController.updateBlock(oldBlock, newBlock);\n      console.log('Block updated:', updatedBlock);\n      setMessage('Block updated successfully');\n      setIsSuccess(true);\n      setOldBlock('');\n      setNewBlock('');\n      // Handle success message or navigation\n    } catch (error) {\n      console.error('Error updating block:', error);\n      setMessage('Block update failed');\n      setIsSuccess(false);\n      setOldBlock('');\n      setNewBlock('');\n      // Handle error message\n    }\n  }\n\n  return (\n    <div>\n      <h2>Update Block</h2>\n      <form onSubmit={handleUpdateBlock}>\n        <label>Old Block:</label>\n        <input\n          type=\"text\"\n          value={oldBlock}\n          onChange={e => setOldBlock(e.target.value)}\n        />\n        <label>New Block:</label>\n        <input\n          type=\"text\"\n          value={newBlock}\n          onChange={e => setNewBlock(e.target.value)}\n        />\n        <button type=\"submit\">Update Block</button>\n      </form>\n      {message && (\n        <p style={{ color: isSuccess ? 'green' : 'red' }}>{message}</p>\n      )}\n    </div>\n  );\n}\n\nexport default UpdateBlockView;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}